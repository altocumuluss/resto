name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

####### Build Stage #######

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js for frontend and backend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies and build frontend
      - name: Install and Build Frontend
        working-directory: ./client
        run: |
          npm install
          npm run build

      # Install dependencies and build backend
      - name: Install and Build Backend
        working-directory: ./backend
        run: |
          npm install
          npm run build

####### Test Stage #######

  test:
    runs-on: ubuntu-latest
    needs: build  # This ensures tests run only if the build succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js environment for frontend tests
      - name: Set up Node.js for Frontend Tests
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Run frontend tests
      - name: Run Frontend Tests
        working-directory: ./client
        run: |
          npm install
          npm test

      # Set up Node.js environment for backend tests
      - name: Set up Node.js for Backend Tests
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Run backend tests
      - name: Run Backend Tests
        working-directory: ./backend
        run: |
          npm install
          npm test

####### Dockerize Stage #######

  dockerize:
    runs-on: ubuntu-latest
    needs: test  # Only runs if tests succeed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to DockerHub (we need to set up secrets DOCKER_USERNAME and DOCKER_PASSWORD)
      - name: Log in to DockerHub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image for frontend
      - name: Build Frontend Docker Image
        run: |
          docker build -t ghenac/rest-2-client:latest:${{ github.sha }} -f client/Dockerfile .

      # Build Docker image for backend
      - name: Build Backend Docker Image
        run: |
          docker build -t ghenac/rest-2-backend:latest:${{ github.sha }} -f backend/Dockerfile .

####### Push Stage #######

  push:
    runs-on: ubuntu-latest
    needs: dockerize  # Only runs if the Dockerize stage succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push Frontend Docker Image to DockerHub
      - name: Push Frontend Docker Image
        run: |
          docker push ghenac/rest-2-client:latest:${{ github.sha }}

      # Push Backend Docker Image to DockerHub
      - name: Push Backend Docker Image
        run: |
          docker push ghenac/rest-2-backend:latest:${{ github.sha }}

####### Deploy Stage (on EKS) #######

  deploy_eks:
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main'  # Run only if on the main branch

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name rest-eks 

      - name: Deploy to EKS
        run: |
          kubectl apply -f kubernetes/

      - name: Check for Deployment Status
        run: |
          kubectl rollout status deployment/rest-2-backend

      - name: Check for Deployment Status
        run: |
          kubectl rollout status deployment/rest-2-frontend
